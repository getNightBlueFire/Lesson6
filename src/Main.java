public class Main {
    public static void main(String[] args) {

//        Phone a = new Phone("1234567", "red", 123);
//        Phone b = new Phone("1234568", "blue", 122);
//        Phone c = new Phone("1234569", "black", 121);
//        Phone c0 = new Phone("2234569", "black", 121);
//        Phone c1 = new Phone("3234569", "black", 121);
//        Phone c2 = new Phone("4234569", "black", 121);
//        Phone c3 = new Phone("5234569", "black", 121);
//        c.name = "Test";
//        Phone c5 = new Phone();
//        Phone c6 = new Phone();
//
//
//        a.receiveCall(b);
//
//        System.out.println();
//        a.receiveCall(c.getNumber(), c.getName());
//
//
//        a.sendMessage(b, c, c2, c0, c3);
//
//        System.out.println(c1.getName());
//        System.out.println(c2.getName());
//        System.out.println(c3.getName());
//        System.out.println(c.getName());
//        System.out.println(c5.getNumber());
//
//        System.out.println(c5.equals(c6));
//
//
//        Matrix matrix0 = new Matrix(3, 3);
//        Matrix matrix1 = new Matrix(3, 3);
//
//        matrix0.printMatrix();
//        matrix1.printMatrix();
//        Matrix plus = matrix0.plus(matrix1);
//        plus.printMatrix();

//        Printable.test3();
//        System.out.println(Printable.test1);


            ByModem modem = new ByModem();
            Connect connect = new ByModem();



            Modem modem1 = new ByModem();

    }


}
/*1. Класс Phone.
        Создайте класс Phone, который содержит переменные number, model и weight.
        Создайте три экземпляра этого класса.
        Выведите на консоль значения их переменных.
        Добавить в класс Phone методы: receiveCall, имеет один параметр – имя звонящего.
         Выводит на консоль сообщение “Звонит {name}”. Метод getNumber – возвращает номер телефона.
          Вызвать эти методы для каждого из объектов.
        Добавить конструктор в класс Phone, который принимает на вход три параметра для инициализации
         переменных класса - number, model и weight.
        Добавить конструктор, который принимает на вход два параметра для инициализации переменных
         класса - number, model.
        Добавить конструктор без параметров.
        Вызвать из конструктора с тремя параметрами конструктор с двумя.
        Добавьте перегруженный метод receiveCall, который принимает два параметра - имя звонящего и
        номер телефона звонящего. Вызвать этот метод.
        Создать метод sendMessage с аргументами переменной длины. Данный метод принимает на вход номера
         телефонов, которым будет отправлено сообщение. Метод выводит на консоль номера этих телефонов.
2. Класс Person

Создать класс Person, который содержит:

    переменные fullName, age;
    методы move() и talk(), в которых просто вывести на консоль сообщение -"Такой-то  Person говорит".
    Добавьте два конструктора  - Person() и Person(fullName, age).
    Создайте два объекта этого класса. Один объект инициализируется конструктором Person(), другой - Person(fullName, age).

3. Класс Матрица

Создать класс "Матрица". Класс должен иметь следующие переменные:

    двумерный массив вещественных чисел;
    количество строк и столбцов в матрице.

Класс должен иметь следующие методы:

    сложение с другой матрицей;
    умножение на число;
    вывод на печать;
    умножение матриц - по желанию.

3. Читатели библиотеки

Определить класс Reader, хранящий такую информацию о пользователе библиотеки:

    ФИО,
    номер читательского билета,
    факультет,
    дата рождения,
    телефон.
    Методы takeBook(), returnBook().
    Разработать программу, в которой создается массив объектов данного класса.
    Перегрузить методы takeBook(), returnBook():
    - takeBook, который будет принимать количество взятых книг. Выводит на консоль сообщение "Петров В. В. взял 3 книги".
    - takeBook, который будет принимать переменное количество названий книг. Выводит на консоль сообщение "Петров В. В. взял книги: Приключения, Словарь, Энциклопедия".
    - takeBook, который будет принимать переменное количество объектов класса Book (создать новый класс, содержащий имя и автора книги). Выводит на консоль сообщение "Петров В. В. взял книги: Приключения, Словарь, Энциклопедия".
     Аналогичным образом перегрузить метод returnBook(). Выводит на консоль сообщение "Петров В. В. вернул книги: Приключения, Словарь, Энциклопедия". Или  "Петров В. В. вернул 3 книги". Решение

4. Рекурсивный вывод чисел

Даны два целых числа A и В. Выведите все числа от A до B включительно, в порядке возрастания, если A < B, или в порядке убывания в противном случае. Использовать рекурсию.
5. Наследование Student, Aspirant

    Создайте пример наследования, реализуйте класс Student и класс Aspirant, аспирант отличается от студента наличием некой научной работы.
    Класс Student содержит переменные: String firstName, lastName, group. А также, double averageMark, содержащую среднюю оценку.
    Создать переменную типа Student, которая ссылается на объект типа Aspirant.
    Создать метод getScholarship() для класса Student, который возвращает сумму стипендии. Если средняя оценка студента равна 5, то сумма 100 грн, иначе 80. Переопределить этот метод в классе Aspirant.  Если средняя оценка аспиранта равна 5, то сумма 200 грн, иначе 180.
    Создать массив типа Student, содержащий объекты класса Student и Aspirant. Вызвать метод getScholarship() для каждого элемента массива. Смотрите решение задачи в видео 1, видео 2.

6. Автомобили

    Создать класс Car в пакете com.company.vehicles, Engine в пакете com.company.details и Driver в пакете com.company.professions.
    Класс Driver содержит поля - ФИО, стаж вождения.
    Класс Engine содержит поля - мощность, производитель.
    Класс Car содержит поля - марка автомобиля, класс автомобиля, вес, водитель типа Driver, мотор типа Engine. Методы start(), stop(), turnRight(), turnLeft(), которые выводят на печать: "Поехали", "Останавливаемся", "Поворот направо" или "Поворот налево". А также метод toString(), который выводит полную информацию об автомобиле, ее водителе и моторе.
    Создать производный от Car класс  - Lorry (грузовик), характеризуемый также грузоподъемностью кузова.
    Создать производный от Car класс - SportCar, характеризуемый также предельной скоростью.
    Пусть класс Driver расширяет класс Person. Решение

Иерархия классов фото
7. Животные

    Создать класс Animal и расширяющие его классы Dog, Cat, Horse.
    Класс Animal содержит переменные food, location и методы makeNoise, eat, sleep. Метод makeNoise, например, может выводить на консоль "Такое-то животное спит".
    Dog, Cat, Horse переопределяют методы makeNoise, eat.
    Добавьте переменные в классы Dog, Cat, Horse, характеризующие только этих животных.
    Создайте класс Ветеринар, в котором определите метод void treatAnimal(Animal animal). Пусть этот метод распечатывает food и location пришедшего на прием животного.
    В методе main создайте массив типа Animal, в который запишите животных всех имеющихся у вас типов. В цикле отправляйте их на прием к ветеринару.

9. Фигуры

    Создайте супер класс Shape и его наследников Circle, Rectangle.
    Класс Shape содержит абстрактный метод draw() и переменную хранящую цвет.
    Классы Circle, Rectangle содержат координаты точек.
    Создать массив содержащий эти фигуры.
    В цикле нарисовать их (вызвать метод draw).
    Добавить метод equals() для классов Shape, Circle, Rectangle.

10. Интернет магазин, часть 1

    Создать класс Товар, имеющий переменные имя, цена, рейтинг.
    Создать класс Категория, имеющий переменные имя и массив товаров. Создать несколько объектов класса Категория.
    Создать класс Basket, содержащий массив купленных товаров.
    Создать класс User, содержащий логин, пароль и объект класса Basket. Создать объект класса User.

 */